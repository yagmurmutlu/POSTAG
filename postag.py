# -*- coding: utf-8 -*-
"""POSTAG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sn8hN8XV16w3GHjBuiL7zMiJGt5VMB5p

KULLANILAN METİN:

The quick brown fox jumps over the lazy dog.
She was not happy with the results, so she decided to try again.
The cat sat on the windowsill and watched the birds outside.
He always sings in the shower, even though he's not good singer.
Not everyone is cut out for a career in the arts, but those who are often finding it very rewarding.


---


*KELİMELERE AYIRALIM:*
1. The quick brown fox jumps over the lazy dog.

   The, quick, brown, fox, jumps, over, the, lazy, dog
   
2. She was not happy with the results, so she decided to try again.

   She, was, not, happy, with, the, results, so, she, decided, to, try, again
   
3. The cat sat on the windowsill and watched the birds outside.

   The, cat, sat, on, the, windowsill, and, watched, the, birds, outside
   
4. He always sings in the shower, even though he's not good singer.

   He, always, sings, in, the, shower, even, though, he's, not, good, singer
   
5. Not everyone is cut out for a career in the arts, but those who are often finding it very rewarding.

   Not, everyone, is, cut, out, for, a, career, in, the, arts, but, those, who, are, often, finding, it, very, rewarding


---



*KELİMELERİ POS TAG'LAYALIM*
1. The quick brown fox jumps over the lazy dog.

   DT, JJ, JJ, NN, VBZ, IN, DT, JJ, NN
   
2. She was not happy with the results, so she decided to try again.

   PRP, VBD, RB, JJ, IN, DT, NNS, IN, PRP, VBD, TO, VB, RB
   
3. The cat sat on the windowsill and watched the birds outside.

   DT, NN, VBD, IN, DT, NN, CC, VBD, DT, NNS, IN
   
4. He always sings in the shower, even though he's not good singer.

   PRP, RB, VBZ, IN, DT, NN, RB, IN, PRP, VBZ, RB, JJ, NN
   
5. Not everyone is cut out for a career in the arts, but those who are often finding it very rewarding.

   RB, NN, VBZ, VBN, IN, DT, NN, IN, DT, NNS, IN, DT, NNS, CC, DT, NNS, WP, VBP, RB, VBG, PRP, RB, JJ


---
*CÜMLE VE İSİMLERİ GÖSTERELİM:*
1. The brown fox jumps over the dog.

   fox, jumps
   
2. She was happy with the results, so she decided to try.

   She, was, happy, decided, try
   
3. The cat sat on the windowsill and watched the birds.

   cat, sat, watched
   
4. He sings in the shower, even though he's **good singer.**

   He, sings
   
5. everyone is cut out for a career in the arts, but those who are often finding rewarding.

   everyone, is, cut, for, career, those, are, finding, rewarding


---
*EŞ ANLAMLI FİLL'İ BULALIM:*
1. The brown fox leaps over the dog.
   
2. She was content with the results, so she decided to try.
   
3. The cat perched on the windowsill and observed the birds.
   
4. He croons in the shower, even though he's a **poor singer.**
   
5. everyone is suited for a career in the arts, but those who are often finding rewarding.



---


*Cümlelerde "not" kelimesi varsa, "not" kelimesinden sonra gelen kelimenin zıt anlamlısını bulma ve değiştirme:*

1. The brown fox leaps over the dog.
   
2. She was content with the results, so she decided to try.
   
3. The cat perched on the windowsill and observed the birds.
   
4. He croons in the shower, even though he's a poor singer.
   
5. everyone is suited for a career in the arts, but those who are often finding rewarding.
"""

import nltk
from nltk.corpus import wordnet
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.tag import pos_tag

# Metni tanımlama
text = """The quick brown fox jumps over the lazy dog.
She was not happy with the results, so she decided to try again.
The cat sat on the windowsill and watched the birds outside.
He always sings in the shower, even though he's not good singer.
Not everyone is cut out for a career in the arts, but those who are often finding it very rewarding."""

# Cümleleri ayırma
sentences = sent_tokenize(text)

# Kelimeleri ayırma ve POS tag'leme
pos_tags = []
filtered_sentences = []

for sentence in sentences:
    words = word_tokenize(sentence)
    tagged_words = pos_tag(words)
    pos_tags.append(tagged_words)

    # Sadece isimler ve fiilleri al
    filtered_words = [word for word, tag in tagged_words if tag.startswith('N') or tag.startswith('V')]
    filtered_sentences.append(filtered_words)

# Fiiller için eş anlamları bulma
def find_synonym(word):
    synonyms = []
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            synonyms.append(lemma.name())
    return synonyms[1] if synonyms else word

synonym_sentences = []

for words in filtered_sentences:
    synonyms = [find_synonym(word) if pos_tag([word])[0][1].startswith('V') else word for word in words]
    synonym_sentences.append(synonyms)

# "Not" kelimesi için zıt anlamlı kelimeyi bulma
def find_antonym(word):
    for syn in wordnet.synsets(word):
        for lemma in syn.lemmas():
            if lemma.antonyms():
                return lemma.antonyms()[0].name()
    return word

antonym_sentences = []

for words in synonym_sentences:
    antonyms = []
    for i, word in enumerate(words):
        if word.lower() == 'not' and i < len(words) - 1:
            antonyms.append(find_antonym(words[i + 1]))
        else:
            antonyms.append(word)
    antonym_sentences.append(antonyms)

# Her POS tag için kaç kelime olduğunu gösterme
pos_count = {}
for tagged_words in pos_tags:
    for word, tag in tagged_words:
        pos_count[tag] = pos_count.get(tag, 0) + 1

# Sonuçları yazdırma
for i, (sentence, words) in enumerate(zip(sentences, antonym_sentences)):
    print(f"{i + 1}. {' '.join(words)}")

print("\nPOS Tag Counts:")
for tag, count in pos_count.items():
    print(f"{tag}: {count}")